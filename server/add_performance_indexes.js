import { query } from './database.js';

async function addPerformanceIndexes() {
  try {
    console.log('üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n');

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã work_materials
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è work_materials...');
    
    // –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è work_id + material_id (—É–∂–µ –µ—Å—Ç—å PRIMARY KEY, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_work_materials_work_material 
      ON work_materials (work_id, material_id)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_work_materials_work_material —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è work_id (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_work_materials_work_id 
      ON work_materials (work_id)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_work_materials_work_id —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è material_id (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_work_materials_material_id 
      ON work_materials (material_id)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_work_materials_material_id —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã works_ref
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è works_ref...');
    
    // –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ sort_order
    await query(`
      CREATE INDEX IF NOT EXISTS idx_works_ref_sort_order 
      ON works_ref (sort_order)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_works_ref_sort_order —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è id (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_works_ref_id 
      ON works_ref (id)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_works_ref_id —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è name (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_works_ref_name 
      ON works_ref (name)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_works_ref_name —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã materials
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è materials...');
    
    // –ò–Ω–¥–µ–∫—Å –¥–ª—è id (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_materials_id 
      ON materials (id)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_materials_id —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è name (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_materials_name 
      ON materials (name)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_materials_name —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è unit_price (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ü–µ–Ω–µ)
    await query(`
      CREATE INDEX IF NOT EXISTS idx_materials_unit_price 
      ON materials (unit_price)
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å idx_materials_unit_price —Å–æ–∑–¥–∞–Ω');

    // –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ JOIN –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è JOIN –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    // –ò–Ω–¥–µ–∫—Å –¥–ª—è works_ref —Å –ø–æ–ª—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –≤ JOIN
    await query(`
      CREATE INDEX IF NOT EXISTS idx_works_ref_join 
      ON works_ref (id, sort_order, name, unit, unit_price)
    `);
    console.log('‚úÖ –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å idx_works_ref_join —Å–æ–∑–¥–∞–Ω');

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è materials —Å –ø–æ–ª—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –≤ JOIN
    await query(`
      CREATE INDEX IF NOT EXISTS idx_materials_join 
      ON materials (id, name, unit, unit_price, image_url, item_url)
    `);
    console.log('‚úÖ –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å idx_materials_join —Å–æ–∑–¥–∞–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const indexes = await query(`
      SELECT 
        schemaname,
        tablename,
        indexname,
        indexdef
      FROM pg_indexes 
      WHERE tablename IN ('work_materials', 'works_ref', 'materials')
      AND indexname LIKE 'idx_%'
      ORDER BY tablename, indexname
    `);

    console.log(`\nüìã –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexes.rows.length}`);
    indexes.rows.forEach(idx => {
      console.log(`- ${idx.tablename}.${idx.indexname}`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    const startTime = Date.now();
    const testResult = await query(`
      SELECT
        wm.*,
        w.name as work_name,
        w.unit as work_unit,
        w.unit_price as work_unit_price,
        m.name as material_name,
        m.unit as material_unit,
        m.unit_price as material_unit_price,
        m.image_url as material_image_url,
        m.item_url as material_item_url,
        (wm.consumption_per_work_unit * wm.waste_coeff) as total_consumption,
        ((wm.consumption_per_work_unit * wm.waste_coeff) * m.unit_price) as material_cost_per_work_unit
      FROM work_materials wm
      JOIN works_ref w ON wm.work_id = w.id
      JOIN materials m ON wm.material_id = m.id
      ORDER BY w.sort_order, w.id, m.id
      LIMIT 100
    `);
    const endTime = Date.now();
    const duration = endTime - startTime;

    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${duration}ms`);
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${testResult.rows.length}`);

    console.log('\nüéâ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã! –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å—Å—è.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
  }
}

addPerformanceIndexes();
