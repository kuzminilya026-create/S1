import { query } from './database.js';
import fs from 'fs';

async function importWorkMaterialsCSV() {
  try {
    console.log('üìÅ –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª —Å —Å–≤—è–∑—è–º–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª...');
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvContent = fs.readFileSync('../work_materials.strict.cleaned.csv', 'utf8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${lines.length - 1} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await query('DELETE FROM work_materials');
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    
    // –ü–∞—Ä—Å–∏–º CSV –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const connections = [];
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 1; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const line = lines[i].trim();
      if (!line) continue;
      
      const [work_id, material_id, consumption_per_work_unit, waste_coeff] = line.split(';');
      
      if (work_id && material_id) {
        try {
          await query(`
            INSERT INTO work_materials (work_id, material_id, consumption_per_work_unit, waste_coeff)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (work_id, material_id)
            DO UPDATE SET
              consumption_per_work_unit = EXCLUDED.consumption_per_work_unit,
              waste_coeff = EXCLUDED.waste_coeff,
              updated_at = now()
          `, [
            work_id.trim(),
            material_id.trim(),
            parseFloat(consumption_per_work_unit) || 1.0,
            parseFloat(waste_coeff) || 1.0
          ]);
          
          successCount++;
          
          if (successCount % 100 === 0) {
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} —Å–≤—è–∑–µ–π...`);
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${error.message}`);
          errorCount++;
        }
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${successCount} —Å–≤—è–∑–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    const stats = await query(`
      SELECT 
        COUNT(*) as total_connections,
        COUNT(DISTINCT work_id) as unique_works,
        COUNT(DISTINCT material_id) as unique_materials
      FROM work_materials
    `);
    
    const stat = stats.rows[0];
    console.log(`üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`- –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: ${stat.total_connections}`);
    console.log(`- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç: ${stat.unique_works}`);
    console.log(`- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${stat.unique_materials}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–µ–π:');
    const examples = await query(`
      SELECT 
        wm.work_id,
        wm.material_id,
        wm.consumption_per_work_unit,
        wm.waste_coeff,
        w.name as work_name,
        m.name as material_name
      FROM work_materials wm
      LEFT JOIN works_ref w ON wm.work_id = w.id
      LEFT JOIN materials m ON wm.material_id = m.id
      ORDER BY wm.work_id, wm.material_id
      LIMIT 10
    `);
    
    examples.rows.forEach(row => {
      console.log(`- ${row.work_id} (${row.work_name || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}) -> ${row.material_id} (${row.material_name || '–Ω–µ –Ω–∞–π–¥–µ–Ω'})`);
      console.log(`  –†–∞—Å—Ö–æ–¥: ${row.consumption_per_work_unit} –µ–¥., –∫–æ—ç—Ñ. –æ—Ç—Ö–æ–¥–∞: ${row.waste_coeff}`);
    });
    
    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
  }
}

importWorkMaterialsCSV();
